{"ast":null,"code":"import { USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_SUCCESS } from '../constants/userConstants';\nimport axios from 'axios';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/ashish/Desktop/PROSHOP/frontend/src/actions/userActions.js"],"names":["USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_SUCCESS","axios","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","name","USER_REGISTER_REQUEST","USER_REGISTER_FAIL"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,kBAA1B,EAA8CC,kBAA9C,EAAkEC,WAAlE,EAA+EC,qBAA/E,QAA4G,4BAA5G;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;AAC5D,MAAI;AACFA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAET;AADC,KAAD,CAAR;AAIA,UAAMU,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAMA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMR,KAAK,CAACS,IAAN,CACjB,kBADiB,EAEjB;AAACP,MAAAA,KAAD;AAAOC,MAAAA;AAAP,KAFiB,EAGjBG,MAHiB,CAArB;AAMAF,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACR,kBADA;AAELa,MAAAA,OAAO,EAACF;AAFH,KAAD,CAAR;AAKAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAgCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAhC;AACD,GAvBD,CAuBE,OAAOO,KAAP,EAAc;AACdX,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACV,eADA;AAELe,MAAAA,OAAO,EACPK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACCF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OADrB,GAECF,KAAK,CAACE;AALF,KAAD,CAAR;AAQD;AACF,CAlCM;AAqCP,OAAO,MAAMC,MAAM,GAAG,MAAKd,QAAD,IAAY;AACpCO,EAAAA,YAAY,CAACQ,UAAb,CAAwB,UAAxB;AACAf,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAACP;AAAN,GAAD,CAAR;AACD,CAHM;AAMP,OAAO,MAAMsB,QAAQ,GAAG,CAACC,IAAD,EAAMnB,KAAN,EAAaC,QAAb,KAA0B,MAAOC,QAAP,IAAoB;AACpE,MAAI;AACFA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEiB;AADC,KAAD,CAAR;AAIA,UAAMhB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAMA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMR,KAAK,CAACS,IAAN,CACjB,YADiB,EAEjB;AAACY,MAAAA,IAAD;AAAMnB,MAAAA,KAAN;AAAYC,MAAAA;AAAZ,KAFiB,EAGjBG,MAHiB,CAArB;AAMAF,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACN,qBADA;AAELW,MAAAA,OAAO,EAACF;AAFH,KAAD,CAAR;AAKAJ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAACR,kBADE;AAEPa,MAAAA,OAAO,EAACF;AAFD,KAAD,CAAR;AAKAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAgCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAhC;AACD,GA5BD,CA4BE,OAAOO,KAAP,EAAc;AACdX,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACkB,kBADA;AAELb,MAAAA,OAAO,EACPK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACCF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OADrB,GAECF,KAAK,CAACE;AALF,KAAD,CAAR;AAQD;AACF,CAvCM","sourcesContent":["import { USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_SUCCESS } from '../constants/userConstants'\nimport axios from 'axios'\n\n\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST,\n    })\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n\n    const {data} = await axios.post(\n        '/api/users/login',\n        {email,password},\n        config\n    )\n\n    dispatch({\n        type:USER_LOGIN_SUCCESS,\n        payload:data\n    })\n\n    localStorage.setItem('userInfo',JSON.stringify(data))\n  } catch (error) {\n    dispatch({\n        type:USER_LOGIN_FAIL,\n        payload:\n        error.response && error.response.data.message\n        ?error.response.data.message\n        :error.message,\n    })\n\n  }\n}\n\n\nexport const logout = ()=>(dispatch)=>{\n  localStorage.removeItem('userInfo')\n  dispatch({type:USER_LOGOUT})\n}\n\n\nexport const register = (name,email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST,\n    })\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n\n    const {data} = await axios.post(\n        '/api/users',\n        {name,email,password},\n        config\n    )\n\n    dispatch({\n        type:USER_REGISTER_SUCCESS,\n        payload:data\n    })\n    \n    dispatch({\n      type:USER_LOGIN_SUCCESS,\n      payload:data,\n    })\n\n    localStorage.setItem('userInfo',JSON.stringify(data))\n  } catch (error) {\n    dispatch({\n        type:USER_REGISTER_FAIL,\n        payload:\n        error.response && error.response.data.message\n        ?error.response.data.message\n        :error.message,\n    })\n\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}